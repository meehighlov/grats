package handlers

import (
	"bytes"
	"fmt"
	"log"
	"strings"

	"github.com/meehighlov/grats/db"
	"github.com/meehighlov/grats/telegram"
)

const GRANT_ACCESS_ENTRYPOINT = 1
const SAVE_TG_USERNAME = 2

const REVOKE_ACCESS_ENTRYPOINT = 1
const UPDATE_ACCESS_INFO = 2

func AccessListHandler(event telegram.Event) error {
	accessList, err := (&db.Access{}).All()

	if err != nil {
		log.Println("Error fetching access list", err.Error())
		event.Reply(err.Error())
		return nil
	}

	if len(*accessList) == 0 {
		event.Reply("–í —Ç–∞–±–ª–∏—Ü–µ –¥–æ—Å—Ç—É–ø–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π‚ú®")
		return nil
	}

	var msg bytes.Buffer
	for _, access := range *accessList {
		msg.WriteString(access.GetTGUserName())
		msg.WriteString("\n")
	}

	event.Reply(msg.String())

	return nil
}

func grantAccess(event telegram.Event) (int, error) {
	msg := "–ö–æ–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø? –í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–≥üòò"

	event.Reply(msg)

	return SAVE_TG_USERNAME, nil
}

func saveAccess(event telegram.Event) (int, error) {
	tgusername := event.GetMessage().Text
	tgusername = strings.Replace(tgusername, "@", "", 1)

	err := (&db.Access{BaseFields: db.NewBaseFields(), TGusername: tgusername}).Save()

	if err != nil {
		event.Reply(err.Error())
		return SAVE_TG_USERNAME, nil
	}

	msg := fmt.Sprintf("–î–æ—Å—Ç—É–ø –¥–ª—è %s –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—É—Å—Ç—å –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏üíã", tgusername)

	event.Reply(msg)

	return telegram.STEPS_DONE, nil
}

func revokeAccess(event telegram.Event) (int, error) {
	msg := "–£ –∫–æ–≥–æ –æ—Ç–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø?üò°"

	event.Reply(msg)

	return UPDATE_ACCESS_INFO, nil
}

func updateAccessInfo(event telegram.Event) (int, error) {
	tgusername := strings.Replace(event.GetMessage().Text, "@", "", 1)
	err := (&db.Access{TGusername: tgusername}).Delete()

	if err != nil {
		event.Reply(err.Error())
		return UPDATE_ACCESS_INFO, nil
	}

	msg := fmt.Sprintf("–î–æ—Å—Ç—É–ø –¥–ª—è %s –∑–∞–∫—Ä—ã—Çüñê", event.GetMessage().Text)

	event.Reply(msg)

	return telegram.STEPS_DONE, nil
}

func GrantAccessChatHandler() map[int]telegram.CommandStepHandler {
	handlers := make(map[int]telegram.CommandStepHandler)

	handlers[GRANT_ACCESS_ENTRYPOINT] = grantAccess
	handlers[SAVE_TG_USERNAME] = saveAccess

	return handlers
}

func RevokeAccessChatHandler() map[int]telegram.CommandStepHandler {
	handlers := make(map[int]telegram.CommandStepHandler)

	handlers[REVOKE_ACCESS_ENTRYPOINT] = revokeAccess
	handlers[UPDATE_ACCESS_INFO] = updateAccessInfo

	return handlers
}
