package src

import (
	"fmt"
	"log"
	"strings"
	"bytes"

	"github.com/meehighlov/grats/db"
	"github.com/meehighlov/grats/telegram"
)

func StartHandler(tc telegram.APICaller, message telegram.Message) error {

	isAdmin := 0
	if message.From.IsAdmin() {
		isAdmin = 1
	}

	user := db.User{
		ID:         message.From.Id,
		Name:       message.From.FirstName,
		TGusername: message.From.Username,
		ChatId:     message.Chat.Id,
		Birthday:   "",
		IsAdmin:    isAdmin,
	}

	user.Save()

	hello := fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç, %s üëã –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–∏—Öü•≥ \n\n /help - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ãüôå",
		message.From.Username,
	)

	tc.SendMessage(message.GetChatIdStr(), hello, false)

	return nil
}

func AddBirthdayHandler(tc telegram.APICaller, message telegram.Message) error {
	// truncate command, so start from index 1
	data := strings.Split(message.Text, " ")[1:]

	if len(data) != 2 {
		tc.SendMessage(message.GetChatIdStr(), "–ù–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫—É—é –∑–∞–ø–∏—Å—åü§î –§–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π: /add –ò–º—è dd.mm.yyyy", false)

		return nil
	}

	friend := db.Friend{
		Name:     data[0],
		BirthDay: data[1],
		UserId:   message.From.Id,
		ChatId:   message.Chat.Id,
	}

	friend.Save()

	msg := fmt.Sprintf("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è %s –¥–æ–±–∞–≤–ª–µ–Ω üíæ", data[0])

	tc.SendMessage(message.GetChatIdStr(), msg, false)

	return nil
}

func ListBirthdaysHandler(tc telegram.APICaller, message telegram.Message) error {
	friends, err := (&db.Friend{}).All(message.From.Id)

	if err != nil {
		log.Println("Error fetching friends", err.Error())
		return nil
	}

	if len(friends) == 0 {
		tc.SendMessage(message.GetChatIdStr(), "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç‚ú®", false)
		return nil
	}

	var msg bytes.Buffer
	for _, friend := range friends {
		msg.WriteString(friend.Name)
		msg.WriteString(" ")
		msg.WriteString(friend.BirthDay)
		msg.WriteString("\n")
	}

	tc.SendMessage(message.GetChatIdStr(), msg.String(), false)

	return nil
}

func DeleteBirtdayHandler(tc telegram.APICaller, message telegram.Message) error {
	// deletes birthday from db for user
	// sends success to chat

	return nil
}

func HelpHandler(tc telegram.APICaller, message telegram.Message) error {
	commands := []string{
		"–ù–∏–∂–µ - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüôå",
		"\n",
		"/add –ò–º—è 01.02.2003 - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
		"/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π",
	}

	msg := strings.Join(commands, "\n")

	tc.SendMessage(message.GetChatIdStr(), msg, false)

	return nil
}

func StartPolling(tc telegram.APICaller) error {

	updates := tc.GetUpdatesChannel()

	for update := range updates {
		if !IsAuthUser(update.Message.From) {
			continue
		}

		command := update.Message.GetCommand()

		// todo use map

		switch command {
		case "/help":
			go HelpHandler(tc, update.Message)
		case "/start":
			go StartHandler(tc, update.Message)
		case "/add":
			go AddBirthdayHandler(tc, update.Message)
		case "/list":
			go ListBirthdaysHandler(tc, update.Message)
		case "/delete":
			go DeleteBirtdayHandler(tc, update.Message)
		default:
			continue
		}
	}

	return nil
}
