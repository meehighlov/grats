package handlers

import (
	"context"
	"crypto/tls"
	"fmt"
	"net/url"
	"strconv"
	"strings"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/db"
	"gorm.io/gorm"
)

const (
	WISH_LINK_MAX_LEN = 500
)

func EditPriceHandler(ctx context.Context, event *common.Event) error {
	event.ReplyCallbackQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö")

	event.GetContext().AppendText(event.GetCallbackQuery().Data)

	refreshMessageId := event.GetCallbackQuery().Message.GetMessageIdStr()
	event.GetContext().AppendText(refreshMessageId)

	event.SetNextHandler("edit_price_save")

	return nil
}

func SaveEditPriceHandler(ctx context.Context, event *common.Event) error {
	message := event.GetMessage()
	params := common.CallbackFromString(event.GetContext().GetTexts()[0])
	wishId := params.Id

	done := false

	err := db.GetDB().WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		wish, err := (&db.Wish{BaseFields: db.BaseFields{ID: wishId}}).Filter(ctx, tx)
		if err != nil {
			event.Reply(ctx, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–Ω–∏–µ")
			return err
		}

		price, err := strconv.ParseFloat(message.Text, 64)
		if err != nil || price <= 0 {
			event.Reply(ctx, "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –ø—Ä–∏–º–µ—Ä üëâ 1000, 400.5")
			event.SetNextHandler("edit_price_save")
			return nil
		}

		wish[0].Price = message.Text
		if err := wish[0].Save(ctx, tx); err != nil {
			return err
		}

		done = true

		executorId := strconv.Itoa(event.GetMessage().From.Id)

		chatId := event.GetMessage().GetChatIdStr()
		refreshMessageId := event.GetContext().GetTexts()[1]
		event.RefreshMessage(ctx, chatId, refreshMessageId, wish[0].Info(executorId), *buildWishInfoKeyboard(wish[0], fmt.Sprintf("%d", LIST_START_OFFSET), params.Pagination.Direction, params.SourceId).Murkup())

		return nil
	})

	if err != nil {
		return err
	}

	if done {
		event.Reply(ctx, "–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ üíæ")
		event.SetNextHandler("")
	}

	return nil
}

func EditLinkHandler(ctx context.Context, event *common.Event) error {
	event.ReplyCallbackQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É")

	event.GetContext().AppendText(event.GetCallbackQuery().Data)

	refreshMessageId := event.GetCallbackQuery().Message.GetMessageIdStr()
	event.GetContext().AppendText(refreshMessageId)

	event.SetNextHandler("edit_link_save")

	return nil
}

func SaveEditLinkHandler(ctx context.Context, event *common.Event) error {
	message := event.GetMessage()
	params := common.CallbackFromString(event.GetContext().GetTexts()[0])
	wishId := params.Id

	done := false

	link := message.Text
	if len(link) > WISH_LINK_MAX_LEN {
		event.Reply(ctx, fmt.Sprintf("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤", WISH_LINK_MAX_LEN))
		event.SetNextHandler("edit_link_save")
		return nil
	}

	parsedURL, err := url.Parse(link)
	if err != nil || parsedURL.Host == "" {
		event.Reply(ctx, "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://example.com")
		event.SetNextHandler("edit_link_save")
		return nil
	}

	info, err := getCertificateInfo(link)
	if err != nil {
		event.Reply(ctx, "–Ø –Ω–µ –¥–æ–≤–µ—Ä—è—é —ç—Ç–æ–º—É —Å–∞–π—Ç—Éüòî –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É")
		event.SetNextHandler("edit_link_save")
		return nil
	}

	event.Logger.Debug("certificate check", "info", info)

	err = db.GetDB().WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		wish, err := (&db.Wish{BaseFields: db.BaseFields{ID: wishId}}).Filter(ctx, tx)
		if len(wish) == 0 || err != nil {
			event.Reply(ctx, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–Ω–∏–µ, –ª–∏–±–æ –æ–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ")
			return err
		}
		wish[0].Link = link
		if err := wish[0].Save(ctx, tx); err != nil {
			return err
		}

		done = true

		executorId := strconv.Itoa(event.GetMessage().From.Id)
		refreshMessageId := event.GetContext().GetTexts()[1]
		chatId := event.GetMessage().GetChatIdStr()
		event.RefreshMessage(ctx, chatId, refreshMessageId, wish[0].Info(executorId), *buildWishInfoKeyboard(wish[0], fmt.Sprintf("%d", LIST_START_OFFSET), params.Pagination.Direction, params.SourceId).Murkup())

		// delete message with link - it's too large
		event.DeleteMessage(ctx, chatId, message.GetMessageIdStr())

		return nil
	})

	if err != nil {
		return err
	}

	if done {
		event.Reply(ctx, "–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ üíæ")
		event.SetNextHandler("")
	}

	return nil
}

func EditWishNameHandler(ctx context.Context, event *common.Event) error {
	event.ReplyCallbackQuery(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è")

	event.GetContext().AppendText(event.GetCallbackQuery().Data)

	refreshMessageId := event.GetCallbackQuery().Message.GetMessageIdStr()
	event.GetContext().AppendText(refreshMessageId)

	event.SetNextHandler("edit_wish_name_save")

	return nil
}

func SaveEditWishNameHandler(ctx context.Context, event *common.Event) error {
	message := event.GetMessage()
	params := common.CallbackFromString(event.GetContext().GetTexts()[0])
	wishId := params.Id

	done := false

	_, err := validateWishName(message.Text)
	if err != nil {
		event.Reply(ctx, "–ò–º—è –∂–µ–ª–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã")
		event.SetNextHandler("edit_wish_name_save")
		return nil
	}

	err = db.GetDB().WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		wish, err := (&db.Wish{BaseFields: db.BaseFields{ID: wishId}}).Filter(ctx, tx)
		if err != nil {
			event.Logger.Error(
				"SaveEditWishNameHandler",
				"details", err.Error(),
				"chatId", event.GetMessage().GetChatIdStr(),
			)
			event.Reply(ctx, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–Ω–∏–µ, –ª–∏–±–æ –æ–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ")
			return err
		}

		wish[0].Name = message.Text
		err = wish[0].Save(ctx, tx)
		if err != nil {
			return err
		}

		done = true

		executorId := strconv.Itoa(event.GetMessage().From.Id)

		refreshMessageId := event.GetContext().GetTexts()[1]
		chatId := event.GetMessage().GetChatIdStr()
		event.RefreshMessage(ctx, chatId, refreshMessageId, wish[0].Info(executorId), *buildWishInfoKeyboard(wish[0], fmt.Sprintf("%d", LIST_START_OFFSET), params.Pagination.Direction, params.SourceId).Murkup())

		return nil
	})

	if err != nil {
		return err
	}

	if done {
		event.Reply(ctx, "–ù–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ üíæ")
		event.SetNextHandler("")
	}

	return nil
}

func getCertificateInfo(urlStr string) (string, error) {
	if !strings.HasPrefix(urlStr, "https://") {
		return "", fmt.Errorf("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://")
	}

	parsedURL, err := url.Parse(urlStr)
	if err != nil {
		return "", err
	}

	host := parsedURL.Host
	if !strings.Contains(host, ":") {
		host = host + ":443"
	}

	conn, err := tls.Dial("tcp", host, &tls.Config{
		InsecureSkipVerify: false,
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è TLS: %v", err)
	}
	defer conn.Close()

	certs := conn.ConnectionState().PeerCertificates
	if len(certs) == 0 {
		return "", fmt.Errorf("—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
	}

	cert := certs[0]

	certInfo := fmt.Sprintf(
		"–°—É–±—ä–µ–∫—Ç: %s\n–ò–∑–¥–∞—Ç–µ–ª—å: %s\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å: %s\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: %s\nSAN: %v",
		cert.Subject,
		cert.Issuer,
		cert.NotBefore.Format("2006-01-02"),
		cert.NotAfter.Format("2006-01-02"),
		cert.DNSNames,
	)

	return certInfo, nil
}
