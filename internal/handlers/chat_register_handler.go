package handlers

import (
	"context"
	"database/sql"
	"strconv"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/config"
	"github.com/meehighlov/grats/internal/db"
)

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
func GroupChatRegisterHandler(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	chat := db.Chat{
		BaseFields:       db.NewBaseFields(),
		ChatType:         "group",
		BotInvitedBy:     strconv.Itoa(event.GetMessage().From.Id),
		ChatId:           event.GetMessage().GetChatIdStr(),
		GreetingTemplate: "üîî–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É %sü•≥",
	}

	message := event.GetMessage()

	if message.LeftChatMember.Username == config.Cfg().BotName {
		// todo check bot name by GetMe tg method
		err := chat.Delete(ctx, tx)
		if err != nil {
			return err
		}
		err = (&db.Friend{ChatId: strconv.Itoa(message.Chat.Id)}).Delete(ctx, tx)
		if err != nil {
			return err
		}
		return nil
	}

	if message.NewChatMembers != nil {
		for _, member := range message.NewChatMembers {
			// todo check bot name by GetMe tg method
			if member.Username == config.Cfg().BotName {
				err := chat.Save(ctx, tx)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

// –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
func AddChatHandler(ctx context.Context, event *common.Event, _ *sql.Tx) error {
	msg := "–í–≤–µ–¥–∏ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è‚ú®\n\n–Ω–∞–ø—Ä–∏–º–µ—Ä üëâ -1001234567890"

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	event.SetNextHandler("add_chat_save")

	return nil
}

// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
func SaveChatHandler(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	chatId := event.GetMessage().Text

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	chatInfo, err := event.GetChat(ctx, chatId)
	if err != nil || chatInfo == nil {
		if _, err := event.Reply(ctx, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —á–∞—Ç. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ ID —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ."); err != nil {
			return err
		}
		event.SetNextHandler("add_chat_save")
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–∞—Ç–∞
	chat := db.Chat{
		BaseFields:       db.NewBaseFields(),
		ChatType:         "group",
		BotInvitedBy:     strconv.Itoa(event.GetMessage().From.Id),
		ChatId:           chatId,
		GreetingTemplate: "üîî–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É %sü•≥",
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
	existingChats, err := (&db.Chat{ChatId: chatId}).Filter(ctx, tx)
	if err != nil {
		if _, err := event.Reply(ctx, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Çüòî"); err != nil {
			return err
		}
		return err
	}

	if len(existingChats) > 0 {
		if _, err := event.Reply(ctx, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!"); err != nil {
			return err
		}
		event.SetNextHandler("")
		return nil
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
	err = chat.Save(ctx, tx)
	if err != nil {
		if _, err := event.Reply(ctx, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Çüòî"); err != nil {
			return err
		}
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := common.NewInlineKeyboard()
	keyboard.AppendAsStack(
		*common.NewButton("‚¨ÖÔ∏è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤", common.CallChatList().String()),
		*common.NewButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞", common.CallChatInfo(chatId).String()),
	)

	msg := "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."

	if _, err := event.ReplyWithKeyboard(ctx, msg, *keyboard.Murkup()); err != nil {
		return err
	}

	event.SetNextHandler("")

	return nil
}
