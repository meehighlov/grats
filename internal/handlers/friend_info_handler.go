package handlers

import (
	"context"
	"fmt"
	"log/slog"
	"strings"

	"github.com/meehighlov/grats/internal/config"
	"github.com/meehighlov/grats/internal/db"
	"github.com/meehighlov/grats/telegram"
)

func FriendInfoCallbackQueryHandler(event telegram.Event) error {
	ctx, cancel := context.WithTimeout(context.Background(), config.Cfg().HandlerTmeout())
	defer cancel()

	callbackQuery := event.GetCallbackQuery()
	params := strings.Split(callbackQuery.Data, ";")
	friendId := params[1]

	baseFields := db.BaseFields{ID: friendId}
	friends, err := (&db.Friend{BaseFields: baseFields}).Filter(ctx)

	if err != nil {
		slog.Error("error during fetching event info: " + err.Error())
		return nil
	}

	friend := friends[0]

	// todo take from db
	friendTimezone := "–º—Å–∫"

	msgLines := []string{
		fmt.Sprintf("üü¢ %s", friend.Name),
		fmt.Sprintf("üü¢ %s", friend.BirthDay),
		fmt.Sprintf("üü¢ –ù–∞–ø–æ–º–Ω—é –æ –Ω–µ–º %s –≤ –ø–æ–ª–Ω–æ—á—å, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - %s", *friend.GetNotifyAt(), friendTimezone),
	}

	if friend.IsTodayBirthday() {
		msgLines = append(msgLines, fmt.Sprintf("ü•≥ –°–µ–≥–æ–¥–Ω—è %s –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", friend.Name))
	} else {
		if friend.IsThisMonthAfterToday() {
			msgLines = append(msgLines, fmt.Sprintf("üïí –£ %s —Å–∫–æ—Ä–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", friend.Name))
		}
	}

	msg := strings.Join(msgLines, "\n\n")

	offset := params[2]

	markup := [][]map[string]string{
		{
			{
				"text": "üëà–∫ —Å–ø–∏—Å–∫—É",
				"callback_data": fmt.Sprintf("list;%s;<", offset),
			},
		},
		{
			{
				"text": "—É–¥–∞–ª–∏—Ç—åüëã",
				"callback_data": fmt.Sprintf("delete_friend;%s;", friendId),
			},
		},
	}

	event.EditCalbackMessage(ctx, msg, markup)

	return nil
}
