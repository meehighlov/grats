package admin

import (
	"bytes"
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/db"
)

func AdminCommandListHandler(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	commands := []string{
		"/access_list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–ºüòè",
		"/access_grant - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–øüôà",
		"/access_revoke - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–øü§ù",
	}

	msg := strings.Join(commands, "\n")

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	return nil
}

func AccessListHandler(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	accessList, err := (&db.Access{}).All(ctx, tx)

	if err != nil {
		if _, err := event.Reply(ctx, err.Error()); err != nil {
			return err
		}
		return err
	}

	if len(*accessList) == 0 {
		if _, err := event.Reply(ctx, "–í —Ç–∞–±–ª–∏—Ü–µ –¥–æ—Å—Ç—É–ø–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π‚ú®"); err != nil {
			return err
		}
		return err
	}

	var msg bytes.Buffer
	for _, access := range *accessList {
		msg.WriteString(access.GetTGUserName())
		msg.WriteString("\n")
	}

	if _, err := event.Reply(ctx, msg.String()); err != nil {
		return err
	}

	return nil
}

func GrantAccess(ctx context.Context, event *common.Event, _ *sql.Tx) error {
	msg := "–ö–æ–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø? –í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–≥üòò"

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	event.SetNextHandler("access_save_tg_username")

	return nil
}

func SaveAccess(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	tgusername := event.GetMessage().Text
	tgusername = strings.Replace(tgusername, "@", "", 1)

	err := (&db.Access{BaseFields: db.NewBaseFields(), TGusername: tgusername}).Save(ctx, tx)

	if err != nil {
		if _, err := event.Reply(ctx, err.Error()); err != nil {
			return err
		}
		return err
	}

	msg := fmt.Sprintf("–î–æ—Å—Ç—É–ø –¥–ª—è %s –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—É—Å—Ç—å –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏üíã", tgusername)

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	event.SetNextHandler("")

	return nil
}

func RevokeAccess(ctx context.Context, event *common.Event, _ *sql.Tx) error {
	msg := "–£ –∫–æ–≥–æ –æ—Ç–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø?üò°"

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	event.SetNextHandler("access_update")

	return nil
}

func UpdateAccessInfo(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	tgusername := strings.Replace(event.GetMessage().Text, "@", "", 1)
	err := (&db.Access{TGusername: tgusername}).Delete(ctx, tx)

	if err != nil {
		if _, err := event.Reply(ctx, err.Error()); err != nil {
			return err
		}
		event.SetNextHandler("access_update")
		return err
	}

	msg := fmt.Sprintf("–î–æ—Å—Ç—É–ø –¥–ª—è %s –∑–∞–∫—Ä—ã—Çüñê", event.GetMessage().Text)

	if _, err := event.Reply(ctx, msg); err != nil {
		return err
	}

	event.SetNextHandler("")

	return nil
}
