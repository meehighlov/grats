package handlers

import (
	"context"
	"fmt"
	"html"
	"regexp"
	"strconv"
	"strings"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/db"
)

const (
	WISH_LIMIT_FOR_USER = 50
	WISH_NAME_MAX_LEN   = 100
)

func AddWishHandler(ctx context.Context, event *common.Event) error {
	wishListId := common.CallbackFromString(event.GetCallbackQuery().Data).Id
	userId := strconv.Itoa(event.GetCallbackQuery().From.Id)

	wishes, err := (&db.Wish{UserId: userId}).Filter(ctx, nil)
	if err != nil {
		event.Logger.Error("error getting wishes: " + err.Error())
		event.Reply(ctx, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚ö†Ô∏è –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –æ–ø–∏—à–∏—Ç–µ –µ–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
		return err
	}

	if len(wishes) >= WISH_LIMIT_FOR_USER {
		event.ReplyCallbackQuery(
			ctx,
			fmt.Sprintf(
				"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∂–µ–ª–∞–Ω–∏–πüëâüëà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d",
				WISH_LIMIT_FOR_USER,
			),
		)
		return nil
	}

	msg := "‚ú®–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è\n"
	msg += fmt.Sprintf("\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–Ω–∏–π - %d", WISH_LIMIT_FOR_USER)

	if _, err := event.ReplyCallbackQuery(ctx, msg); err != nil {
		return err
	}
	event.GetContext().AppendText(wishListId)
	event.GetContext().AppendText(userId)

	event.SetNextHandler("add_save_wish")

	return nil
}

func SaveWish(ctx context.Context, event *common.Event) error {
	message := event.GetMessage()
	userId := strconv.Itoa(message.From.Id)
	wishListId := event.GetContext().GetTexts()[0]

	if wishListId == "" {
		event.Logger.Error(
			"SaveWish",
			"error", "wishListId is empty",
			"userId", userId,
		)
		return nil
	}

	if len(message.Text) > WISH_NAME_MAX_LEN {
		event.Reply(ctx, fmt.Sprintf("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–º—è, –º–∞–∫—Å–∏–º—É–º - %d —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", WISH_NAME_MAX_LEN))
		return nil
	}

	validatedName, err := validateWishName(message.Text)
	if err != nil {
		event.Reply(ctx, "–ò–º—è –∂–µ–ª–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã")
		return nil
	}

	wish := db.Wish{
		BaseFields: db.NewBaseFields(false),
		Name:       validatedName,
		ChatId:     message.GetChatIdStr(),
		UserId:     userId,
		WishListId: wishListId,
	}

	err = wish.Save(ctx, nil)
	if err != nil {
		return err
	}

	msg := "–ñ–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üíæ"

	if _, err := event.ReplyWithKeyboard(
		ctx,
		msg,
		*buildWishNavigationMarkup(wish.ID, wishListId).Murkup(),
	); err != nil {
		return err
	}

	event.SetNextHandler("")

	return nil
}

func buildWishNavigationMarkup(wishId, wishListId string) *common.InlineKeyboard {
	keyboard := common.NewInlineKeyboard()

	keyboard.AppendAsStack(
		common.NewButton("üìÇ –æ—Ç–∫—Ä—ã—Ç—å –∂–µ–ª–∞–Ω–∏–µ", common.CallWishInfo(wishId, fmt.Sprintf("%d", LIST_START_OFFSET)).String()),
		common.NewButton("‚ûï –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ", common.CallAddItem(wishListId, "wish").String()),
		common.NewButton("üìã —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π", common.CallList(fmt.Sprintf("%d", LIST_START_OFFSET), ">", wishListId, "wish").String()),
	)

	return keyboard
}

func validateWishName(name string) (string, error) {
	trimmedName := strings.TrimSpace(name)
	if len(trimmedName) > WISH_NAME_MAX_LEN {
		return "", fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å %d —Å–∏–º–≤–æ–ª–æ–≤", WISH_NAME_MAX_LEN)
	}

	sanitizedName := html.EscapeString(trimmedName)

	reg := regexp.MustCompile(`[^\p{L}\p{N}\p{P}\p{Z}]`)
	sanitizedName = reg.ReplaceAllString(sanitizedName, "")

	return sanitizedName, nil
}
