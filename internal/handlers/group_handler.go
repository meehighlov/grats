package handlers

import (
	"context"
	"database/sql"
	"fmt"
	"strconv"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/db"
)

const HOWTO = `
1. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –ó–∞–π–¥–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –≤—ã–∑–æ–≤–∏ /chats
3. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç –≤ 00:00 –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è

–ï—Å–ª–∏ —É–±—Ä–∞—Ç—å –º–µ–Ω—è –∏–∑ —á–∞—Ç–∞ - —è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—é –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
–∏ –Ω–µ –±—É–¥—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç üôå
`

func GroupHandler(ctx context.Context, event *common.Event, tx *sql.Tx) error {
	invitedBy := event.GetMessage().From.Id
	if event.GetCallbackQuery().Id != "" {
		invitedBy = event.GetCallbackQuery().From.Id
	}

	chats, err := (&db.Chat{BotInvitedBy: strconv.Itoa(invitedBy), ChatType: "group"}).Filter(ctx, tx)
	if err != nil {
		event.Reply(ctx, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Çüòî")
		return err
	}

	keyboard := common.NewInlineKeyboard()
	keyboard.AppendAsStack(*common.NewButton("üí´–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?üí´", common.CallChatHowto(event.GetMessage().GetChatIdStr()).String()))

	if len(chats) == 0 {
		if _, err := event.ReplyWithKeyboard(
			ctx,
			"–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Çüôå",
			*keyboard.Murkup(),
		); err != nil {
			return err
		}
		return nil
	}

	buttons := []common.Button{}

	for _, chat := range chats {
		fullInfo, err := event.GetChat(ctx, chat.ChatId)
		if err != nil {
			return err
		}
		if fullInfo != nil {
			buttons = append(buttons, *common.NewButton(fullInfo.Title, common.CallChatInfo(chat.ChatId).String()))
		}
	}

	keyboard.AppendAsStack(buttons...)

	header := "–≠—Ç–æ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ —è –¥–æ–±–∞–≤–ª–µ–Ω‚ú®"

	if event.GetCallbackQuery().Id != "" {
		if _, err := event.EditCalbackMessage(
			ctx,
			header,
			*keyboard.Murkup(),
		); err != nil {
			return err
		}
	} else {
		if _, err := event.ReplyWithKeyboard(ctx, header, *keyboard.Murkup()); err != nil {
			return err
		}
	}

	return nil
}

func GroupInfoHandler(ctx context.Context, event *common.Event, _ *sql.Tx) error {
	params := common.CallbackFromString(event.GetCallbackQuery().Data)

	chatInfo, err := event.GetChat(ctx, params.Id)
	if err != nil {
		return err
	}

	msg := fmt.Sprintf("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ `%s`", chatInfo.Title)

	if _, err := event.EditCalbackMessage(ctx, msg, *buildChatInfoMarkup(params.Id).Murkup()); err != nil {
		return err
	}

	return nil
}

func GroupHowtoHandler(ctx context.Context, event *common.Event, _ *sql.Tx) error {
	if _, err := event.ReplyCallbackQuery(ctx, HOWTO); err != nil {
		return err
	}

	return nil
}

func buildChatInfoMarkup(chatId string) *common.InlineKeyboard {
	keyboard := common.NewInlineKeyboard()
	keyboard.AppendAsStack(
		*common.NewButton("–¥–æ–±–∞–≤–∏—Ç—å –¥—Ä –≤ —á–∞—Ç", common.CallAddToChat(chatId).String()),
		*common.NewButton("—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥—Ä –≤ —á–∞—Ç–µ", common.CallChatBirthdays(chatId).String()),
		*common.NewButton("‚¨ÖÔ∏è–∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤", common.CallChatList().String()),
	)

	return keyboard
}
