package handlers

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/meehighlov/grats/internal/common"
	"github.com/meehighlov/grats/internal/config"
	"github.com/meehighlov/grats/internal/db"
	"gorm.io/gorm"
)

func SetupHandler(ctx context.Context, event *common.Event, _ *gorm.DB) error {
	message := event.GetMessage()

	// at some point it is possible to use /command in group chat
	// so block this action
	if strings.HasSuffix(message.Chat.Type, "group") {
		return nil
	}

	keyboard := common.NewInlineKeyboard()

	chatId := event.GetMessage().GetChatIdStr()
	if event.GetCallbackQuery().Id != "" {
		chatId = strconv.Itoa(event.GetCallbackQuery().From.Id)
	}

	listButton := common.NewButton("üéÇ –õ–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", common.CallList(fmt.Sprintf("%d", LIST_START_OFFSET), ">", chatId).String())
	groupButton := common.NewButton("üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã", common.CallChatList().String())
	supportButton := common.NewButton("üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", common.CallSupport(chatId).String())

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
	cfg := config.Cfg()
	addBotButton := common.NewAddBotToChatURLButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", cfg.BotName)

	keyboard.AppendAsStack(*listButton, *groupButton, *supportButton)
	keyboard.AppendAsLine(*addBotButton)

	if event.GetCallbackQuery().Id != "" {
		if _, err := event.EditCalbackMessage(
			ctx,
			"–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–º–∞–Ω–¥üôå",
			*keyboard.Murkup(),
		); err != nil {
			return err
		}
		return nil
	}

	if _, err := event.ReplyWithKeyboard(
		ctx,
		"–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–º–∞–Ω–¥üôå",
		*keyboard.Murkup(),
	); err != nil {
		return err
	}

	return nil
}

func SetupFromGroupHandler(ctx context.Context, event *common.Event, tx *gorm.DB) error {
	chatId := event.GetMessage().GetChatIdStr()

	friends, err := (&db.Friend{ChatId: chatId}).Filter(ctx, tx)
	if err != nil {
		event.Logger.Error("error fetching friends", "error", err.Error())
		return err
	}

	if len(friends) == 0 {
		event.Reply(ctx, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥—Äüôå")
		return nil
	}

	nearest := []*db.Friend{}
	for _, friend := range friends {
		if friend.IsThisMonthAfterToday() || friend.IsTodayBirthday() {
			nearest = append(nearest, friend)
		}
	}

	if len(nearest) == 0 {
		event.Reply(ctx, "–ù–µ—Ç –¥—Ä –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ‚ú®")
		return nil
	}

	msg := ""
	for _, friend := range nearest {
		if friend.IsTodayBirthday() {
			msg += fmt.Sprintf("ü•≥ –¥—Ä —Å–µ–≥–æ–¥–Ω—è  %s - %s", friend.Name, friend.BirthDay)
		} else {
			msg += fmt.Sprintf("üïí –¥—Ä –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ %s - %s", friend.Name, friend.BirthDay)
		}
		msg += "\n"
	}

	event.Reply(ctx, msg)

	return nil
}
